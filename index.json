[{"categories":null,"contents":"Addressed pretty significant page load performance issue founde in larger deployments. Eliminates uses of intensive backend query, replacing it with an asynchronous API call against a lucene index. This change reduces page load from from 2+ minutes to nearly instant, with an incredibly responsive UI.\n","permalink":"https://mrityunjaykumar911.github.io/projects/contributions/deploy-triggers/","tags":["Java","jQuery","REST APIs","Bamboo","JSON"],"title":"Atlassian Deployment Triggers"},{"categories":null,"contents":" This talk looked at the nuances of deployment of Machine Learning models in production. In current era, when CI \u0026amp; CD are supported for almost all type of applications developed and with integration with services like GCP, AWS; one can deploy scalable solution at instant.\nHowever, the idiosyncratic complexity for deployment of Machine learning model in robust system is still a mystry and many firms have invested for add-on frameworks for developing a comparable solution to push it to production environemnt, but many still face the challanges like scalability, latency etc.\nWe propose a python heavy environment for deploying the ML models in service layer with flexibility and atmost latency.\nWhy Machine Learning as Service? Limited Scale\n Model created with Python* Great for prototypes, but same thing works horribly in Prod Not-so-great with existing ecosystems  What’s more\n Built for team-specific use cases No Centralized Algorithm Store, Same problems get solved again and again  Challenges Non-reproducible Models\n Extremely Hard to identify anomaly behavior, esp. DNN Model Versioning Tracking Model Quality and OPX  Motivation  Michelangelo, Uber Michelangelo MIT Model DB, ModelDB  Proposal Code it, Stream it.\nStruct the model and stream to over the service layer and API will be up upon completion\n","permalink":"https://mrityunjaykumar911.github.io/publications/machinelearningasservice/","tags":["Continuous Integration","ML pipelines","Machine Learning","Python","REST API","gRPC"],"title":"Running Machine Learning as Service"},{"categories":null,"contents":" GOAL The goal of the project is to find techniques to generate application-specific fingerprints for data. There are many machine learning applications that need to incrementally evolve in their ability to process data. When data does not match the processing ability, we see unexpected results and system misbehavior. If we are able to generate fingerprints for classes of data, and if we can discard data that does not match known fingerprints, then we have better control over how unexpected data can influence underlying algorithms. The key here is to able to generate fingerprints based on the capabilities of the underlying algorithm that uses the input data.\nABSTRACT Machine understanding of questions is tightly related to recognition of articulation in the context of the computational capabilities of an underlying processing algorithm. In this paper a mathematical model to capture and distinguish the latent structure in the articulation of questions is presented. We propose an objective-driven approach to represent this latent structure and show that such an approach is beneficial when examples of complementary objectives are not available. We show that the latent structure can be represented as a system that maximizes a cost function related to the underlying objective. Further, we show that the optimization formulation can be approximated to building a memory of patterns represented as a trained neural auto-encoder. Experimental evaluation using many clusters of questions, each related to an objective, shows 80% recognition accuracy and negligible false positive across these clusters of questions. We then extend the same memory to a related task where the goal is to iteratively refine a dataset of questions based on the latent articulation. We also demonstrate a refinement scheme called K-fingerprints, that achieves nearly 100% recognition with negligible false positive across the different clusters of questions.\nAuthors  Kumar Mrityunjay LinkedIn Guntur Ravindra LinkedIn  ","permalink":"https://mrityunjaykumar911.github.io/publications/icmla2018papertalentica/","tags":["Continuous Integration","ML pipelines","Machine Learning","Python"],"title":"Learning to fingerprint the latent structure in question articulation - ICMLA 2018"},{"categories":null,"contents":"Shields.io is a massive library of badges that can be inserted into project README\u0026rsquo;s or websites displaying various statuses (code coverage, health, version, etc). Support for docker was missing the current build health, and was a pretty trivial addition.\n","permalink":"https://mrityunjaykumar911.github.io/projects/contributions/shields-docker/","tags":["Docker","Rest APIs","JavaScript","node.js","JSON"],"title":"Added Docker Build Status Badge to shields.io"},{"categories":null,"contents":"While adding Structured Data to a client\u0026rsquo;s website I found some example JSON that was invalid. Simple contribution to cleanup the user documentation providing syntactically valid JSON documents.\n","permalink":"https://mrityunjaykumar911.github.io/projects/contributions/schema-org/","tags":["JSON"],"title":"Schema.org Structured Data documentation fixes"},{"categories":null,"contents":"BOSH (Bosh Outer SHell) \u0026ldquo;\u0026hellip; is an open source tool for release engineering, deployment, lifecycle management, and monitoring of distributed systems.\u0026rdquo; And it\u0026rsquo;s amazingly powerful. This examples uses BOSH to provision an Alassian vendor app running on JDK along with the support Postgres database and agents to support it. The releases manages the health of services and will automatically provision, start/stop processes across the various services.\n","permalink":"https://mrityunjaykumar911.github.io/projects/creations/bosh-agents/","tags":["DevOps","BOSH","Java","Atlassian Ecosystem","monit","python","xml/xslt","bash/shell","REST APIs"],"title":"BOSH release for Bamboo \u0026 Remote Agents"},{"categories":null,"contents":"Multiple plugins used by thousands of teams that provide enhanced functionality of Atlassian’s core products (primarily JIRA and Bamboo) to enrich CI/CD capabilities, DevOps automation, or productivity. Functionality spans user interface, web services and persistence.\n","permalink":"https://mrityunjaykumar911.github.io/projects/creations/marketplace/","tags":["Java","Spring","REST APIs","Javascript","Atlassian Developer Ecosystem","Bamboo","JIRA","Bitbucket","Confluence","DevOps"],"title":"Atlassian Marketplace Plugins"},{"categories":null,"contents":"Provides required dependencies and additional utilities to simplify and codify the process of building, testing and delivering Atlassian plugins all the way to the live marketplace. Executes integration/AUT level tests against all stated compatible versions for the productUploads generated artifact to Atlassian marketplaceProvides corresponding metadata indicating version, release notes, and compatibility\n","permalink":"https://mrityunjaykumar911.github.io/projects/creations/docker-marketplace/","tags":["Docker","Maven","Java","Python","REST APIs","Bash/Shell"],"title":"Docker image for Bitbucket CI/CD Pipelines  \"shipit\""},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;]  Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ...  Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ]  ","permalink":"https://mrityunjaykumar911.github.io/search/","tags":null,"title":"Search Results"}]